import java.util.function.Function;
// consider 3 scenarios here:
// 1.when arrived curNode and next go left: we must come from parent node of curNode
// 2.when arrived curNode and next either go right if exists or go parent: we must finised and come back from cur.left
// 3.when none of above two cases, then we have traversed both cur.left and cur.right, so go parent
class Program {
  public static void iterativeInOrderTraversal(
    BinaryTree tree, Function<BinaryTree, Void> callback
  ) {
    BinaryTree previousNode = null;
    BinaryTree curNode = tree;
    while(curNode != null){
      BinaryTree nextNode;
      if(previousNode == null || previousNode == curNode.parent){
        if(curNode.left != null){
           nextNode = curNode.left;
        }
        else{
          callback.apply(curNode);
          nextNode = curNode.right != null ? curNode.right : curNode.parent;
        }
      }
      else if(previousNode == curNode.left)
      {
        callback.apply(curNode);
        nextNode = curNode.right != null ? curNode.right : curNode.parent;
      }
      else
      {
        nextNode = curNode.parent;
      }

      previousNode = curNode;
      curNode = nextNode;
    }
  }

  static class BinaryTree {
    public int value;
    public BinaryTree left;
    public BinaryTree right;
    public BinaryTree parent;

    public BinaryTree(int value) {
      this.value = value;
    }

    public BinaryTree(int value, BinaryTree parent) {
      this.value = value;
      this.parent = parent;
    }
  }
}
