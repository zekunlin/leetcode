/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        // sol1: BFS Time: O(N), Space: O(N)
        // if(root == null) return root;
        // Queue<TreeNode> queue = new LinkedList<>();

        // queue.add(root);

        // while(!queue.isEmpty())
        // {
        //     TreeNode cur = queue.poll();
        //     TreeNode tmp = cur.left;
        //     cur.left = cur.right;
        //     cur.right = tmp;
        //     if(cur.left != null) queue.add(cur.left);
        //     if(cur.right != null) queue.add(cur.right);
        // }

        // return root;

        // sol2: DFS Time:O(N), Space: O(LogN)
        if(root == null) return root;
        TreeNode tmp = root.left;
        root.left =root.right;
        root.right = tmp;

        if(root.left != null) invertTree(root.left);
        if(root.right != null) invertTree(root.right);

        return root;
    }
}
