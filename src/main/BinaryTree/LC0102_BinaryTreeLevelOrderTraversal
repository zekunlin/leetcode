/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> levels;
    public List<List<Integer>> levelOrder(TreeNode root) {
        // sol1: BFS, Time: O(N), Space: O(N) 
        /*
        List<List<Integer>> ret = new ArrayList<>();
        if(root == null) return ret;
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        while(!queue.isEmpty())
        {
            int levelSize = queue.size();
            List<Integer> tmp = new ArrayList<>();

            for(int i = 0; i < levelSize; i++)
            {
                TreeNode cur = queue.poll();

                tmp.add(cur.val);

                if(cur.left != null) queue.add(cur.left);
                if(cur.right != null) queue.add(cur.right);
            }
            
            ret.add(tmp);
        }

        return ret;*/

        // sol2: DFS, Time: O(N), Space: O()
        levels = new ArrayList<>();
        if(root == null) return levels;
        dfs(root, 0);
        return levels;
    }

    private void dfs(TreeNode node, int level){
        //dfs sol: Time:O(N), Space: O(h = logN), worst case O(N)
        //dfs will go deep for each node first, create List<Integer> for every met new depth/level
        //so we need to maintain a List<List<Integer>> level for dfs to access at all nodes' all levels
        // when to add value?
        // use levels.get(level) to get List<Integer> for that specific level and add value there
        if(levels.size() == level) levels.add(new ArrayList<Integer>());

        levels.get(level).add(node.val);

        if(node.left != null) dfs(node.left, level + 1);
        if(node.right != null) dfs(node.right, level + 1);
    }
}
