/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ret = new ArrayList<>();

        if(root == null) return ret;

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        boolean reverse = false;
        
        while(!queue.isEmpty())
        {
            List<Integer> curLevel = new ArrayList<>();
            int qSize = queue.size();
            for(int i = 0; i < qSize; i++)
            {
                TreeNode curNode = queue.poll();

                if(curNode != null)
                {
                    if(reverse)
                    {
                        curLevel.addFirst(curNode.val);
                    }
                    else{
                        curLevel.addLast(curNode.val);
                    };
                }

                if(curNode.left != null) queue.add(curNode.left);
                if(curNode.right != null) queue.add(curNode.right);
            }

            ret.add(curLevel);
            reverse = !reverse;
        }

        return ret;
    }
}
