class Solution {
    public int reverse(int x) {
        int temp=Math.abs(x);// storing the positive value of x foe reverse logic
        int rev=0;// variable to store the reverse number.

        // this while lop has simple reverse the digit logic.
        // just it has one extra if for checking the overflow case.
        while(temp!=0){
            int lastDigit=temp%10;

            // in overflow case we have to return 0
            if(rev>(Integer.MAX_VALUE-lastDigit)/10){
                return 0;
            }
            // here is the explaination of the if condition:
            /* 
            1. We have to check if the reverse will cross the integer limit or not.
              -> So before it becomes greater than the integer limit,
                 we will do reverse Engineering,means..
                 --> Our reverse will build up using rev = rev * 10 + lastDigit
                 --> So we will check the current rev value with:
                    -Subtract lastDigit from Integer Max and then divede it by 10.
                    -We are dividing by 10 cause in normal we multiply it by 10.
                    
                This is valid:
                rev * 10 + lastDigit <= Integer.MAX_VALUE  
                rev * 10 <= Integer.MAX_VALUE - lastDigit
                rev <= (Integer.MAX_VALUE - lastDigit) / 10

                so check for :
                rev > (Integer.MAX_VALUE - lastDigit) / 10 and return 0.


             */

            rev=rev*10+lastDigit;
            temp=temp/10;
        }
        // return (x<0)? (-rev): rev;  --> can be return in one line also.

        // this is simple if else return.
        if(x<0){
            return (-rev);
        }
        //else
        return rev;
    }
}


/*sol1:
class Solution {
    public int reverse(int x) {
        int ans = 0;
        while(x != 0)
        {
            int tmp = x % 10;
            x = x/10;
            if(ans > Integer.MAX_VALUE / 10 || (ans == Integer.MAX_VALUE / 10 && tmp > 7)) return 0;

            if(ans < Integer.MIN_VALUE / 10 || (ans == Integer.MIN_VALUE / 10 && tmp < -8)) return 0;

            ans = ans * 10 + tmp;
        }

        return ans;
    }
}
*/
