/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        // sol1: recursion
        // Time: O(N), Space: O(LogN) worst case O(N);        
        // if(p != null && q != null && p.val == q.val){
        //     return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
        // }

        // return p == q;

        //sol2: stack
        Stack<TreeNode> leftStack = new Stack<>();
        Stack<TreeNode> rightStack = new Stack<>();

        leftStack.add(p);
        rightStack.add(q);

        while(!leftStack.isEmpty() && !rightStack.isEmpty())
        {
            TreeNode curLeft = leftStack.pop();
            TreeNode curRight = rightStack.pop();
            if(curLeft == null && curRight == null) continue;
            if(curLeft != null && curRight != null && curLeft.val == curRight.val)
            {
                leftStack.add(curLeft.left);
                leftStack.add(curLeft.right);

                rightStack.add(curRight.left);
                rightStack.add(curRight.right);
            }
            else{
                return false;
            }
        }
        return leftStack.isEmpty() && rightStack.isEmpty();
    }
}
